//
//  AllLocationsViewController.swift
//  BelTravelApp
//
//  Created by Tatsiana Marchanka on 16.05.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol AllLocationsDisplayLogic: class
{
  func presentLocationsInSelectedRegion(viewModel: AllLocations.Something.ViewModel)
	func presentLocation()
}

class AllLocationsViewController: UIViewController, AllLocationsDisplayLogic
{
	var interactor: AllLocationsBusinessLogic?
	var router: (NSObjectProtocol & AllLocationsRoutingLogic & AllLocationsDataPassing)?
	
	// MARK: Object lifecycle
	
	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
	{
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setup()
	}
	
	required init?(coder aDecoder: NSCoder)
	{
		super.init(coder: aDecoder)
		setup()
	}
	
	// MARK: Setup
	
	private func setup()
	{
		let viewController = self
		let interactor = AllLocationsInteractor()
		let presenter = AllLocationsPresenter()
		let router = AllLocationsRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}
	
	// MARK: Routing
	
	override func prepare(for segue: UIStoryboardSegue, sender: Any?)
	{
		if let scene = segue.identifier {
			let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
			if let router = router, router.responds(to: selector) {
				router.perform(selector, with: segue)
			}
		}
	}
	
	// MARK: View lifecycle
	
	override func viewDidLoad()
	{
		super.viewDidLoad()
		makeCollection()
		loadLocationsInSelectedRegion()
	}
	
	func makeCollection () {
		locationsCollection.delegate = self
		locationsCollection.dataSource = self
		let nib = UINib(nibName: "PlaceCollectionViewCell", bundle: nil)
		locationsCollection.register(nib, forCellWithReuseIdentifier: PlaceCollectionViewCell.identifier)
	}
	
	// MARK: Do something
	
	@IBOutlet weak var locationsCollection: UICollectionView!
	
	var region: String?
	
	var locationsArray = [Location]()
	
	func loadLocationsInSelectedRegion() {
		guard let region = region else {
			return
		}
		let request = AllLocations.Something.Request(region: region)
		interactor?.loadLocation(request: request)
	}
	
	func presentLocationsInSelectedRegion(viewModel: AllLocations.Something.ViewModel) {
		locationsArray = viewModel.locations
		print(locationsArray)
		locationsCollection.reloadData()
		
	}
	func presentLocation() {
		router?.routeToSelectedPlaceViewcontroller()
	}
}


extension AllLocationsViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {

	func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
		return locationsArray.count
	}

	func numberOfSections(in collectionView: UICollectionView) -> Int {
		return 1
	}

	func collectionView(_ collectionView: UICollectionView,
						cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
		guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier:
																PlaceCollectionViewCell.identifier, for: indexPath)
				as? PlaceCollectionViewCell else {
					return UICollectionViewCell()
				}
		cell.imageOfLocation.image = locationsArray[indexPath.row].image
		cell.layer.borderWidth = 0
		cell.layer.shadowColor = UIColor.systemGray.cgColor
		cell.layer.shadowOffset = CGSize(width: 0.3, height: 0)
		cell.layer.shadowRadius = 3
		cell.layer.shadowOpacity = 0.5
		cell.layer.cornerRadius = 15
		cell.layer.masksToBounds = false
		return cell
	}

	func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						sizeForItemAt indexPath: IndexPath) -> CGSize {
		return CGSize(width: 150, height: 150)
	}

	func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
		return 1
	}
	func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						minimumLineSpacingForSectionAt section: Int) -> CGFloat {
		return 20
	}

	func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						insetForSectionAt section: Int) -> UIEdgeInsets {
		return UIEdgeInsets(top: 20, left: 20, bottom: 20, right: 20)
	}

	func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
		let request = AllLocations.Something.Request(location: locationsArray[indexPath.row])
		print(locationsArray[indexPath.row])
		interactor?.setLocation(request: request)
	}
}
