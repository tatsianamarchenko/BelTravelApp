//
//  OtherUserViewController.swift
//  BelTravelApp
//
//  Created by Tatsiana Marchanka on 25.05.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol OtherUserDisplayLogic: class {
  func displaySomething(viewModel: OtherUser.Something.ViewModel)
}

class OtherUserViewController: UIViewController, OtherUserDisplayLogic {
  var interactor: OtherUserBusinessLogic?
  var router: (NSObjectProtocol & OtherUserRoutingLogic & OtherUserDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = OtherUserInteractor()
    let presenter = OtherUserPresenter()
    let router = OtherUserRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
	override func viewDidLoad() {
		super.viewDidLoad()
		doSomething()
		makeTripsCollection()
		makePhotosCollection ()
		userPhoto.image = user?.image
		locationLable.text = user?.name
		tripsLable.text = user?.lastName
		title = user?.name
	}
  
  // MARK: Do something


	var user: FirebaseAuthManager.FullInformationAppUser?
var tripsArray = [NewTrip]()
	var photosArray = [UIImage]()

	@IBOutlet weak var userPhoto: UIImageView!
	@IBOutlet weak var tripsCollection: UICollectionView!
	@IBOutlet weak var noTripsLable: UILabel!
	@IBOutlet weak var photosCollection: UICollectionView!
	@IBOutlet weak var noPhotosLable: UILabel!
	@IBOutlet weak var locationLable: UILabel!
	@IBOutlet weak var tripsLable: UILabel!

	func makeTripsCollection () {
		tripsCollection.delegate = self
		tripsCollection.dataSource = self
		let nib = UINib(nibName: "UpcomingTripCollectionViewCell", bundle: nil)
		tripsCollection.register(nib, forCellWithReuseIdentifier: UpcomingTripCollectionViewCell.identifier)
	}

	func makePhotosCollection () {
		photosCollection.delegate = self
		photosCollection.dataSource = self
		let nib = UINib(nibName: "PlaceCollectionViewCell", bundle: nil)
		photosCollection.register(nib, forCellWithReuseIdentifier: PlaceCollectionViewCell.identifier)
	}


	func doSomething() {
    let request = OtherUser.Something.Request()
		interactor?.setUserInfo(request: request)
  }
  
  func displaySomething(viewModel: OtherUser.Something.ViewModel) {
    //nameTextField.text = viewModel.name
  }
}

extension OtherUserViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {

	func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
		return 0
	}

	func numberOfSections(in collectionView: UICollectionView) -> Int {
		return 1
	}

	func collectionView(_ collectionView: UICollectionView,
						cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
		if collectionView == photosCollection {
		guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier:
																PlaceCollectionViewCell.identifier, for: indexPath)
				as? PlaceCollectionViewCell else {
					return UICollectionViewCell()
				}
			cell.imageOfLocation.image = photosArray[indexPath.row]
			cell.layer.borderWidth = 0
			cell.layer.shadowColor = UIColor.systemGray.cgColor
			cell.layer.shadowOffset = CGSize(width: 0.3, height: 0)
			cell.layer.shadowRadius = 3
			cell.layer.shadowOpacity = 0.5
			cell.layer.cornerRadius = 15
			cell.layer.masksToBounds = false
			return cell
		}

		if collectionView == tripsCollection {
			if !tripsArray.isEmpty {
				noTripsLable.isHidden = true
			}
			guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier:
																	UpcomingTripCollectionViewCell.identifier, for: indexPath)
					as? UpcomingTripCollectionViewCell else {
						return UICollectionViewCell()
					}
			cell.config(model: tripsArray[indexPath.row])
			cell.layer.borderWidth = 0
			cell.layer.shadowColor = UIColor.systemGray.cgColor
			cell.layer.shadowOffset = CGSize(width: 0.3, height: 0)
			cell.layer.shadowRadius = 3
			cell.layer.shadowOpacity = 0.5
			cell.layer.cornerRadius = 15
			cell.layer.masksToBounds = false
			return cell
		}

		return UICollectionViewCell()
	}

	func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						sizeForItemAt indexPath: IndexPath) -> CGSize {
		if collectionView == photosCollection {
			return CGSize(width: 150, height: 150)
		}
		if collectionView == tripsCollection {
			return CGSize(width: 250, height: 100)
		}

		return CGSize(width: 100, height: 100)
	}

	func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
		return 1
	}
	func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						minimumLineSpacingForSectionAt section: Int) -> CGFloat {
		return 20
	}

	func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						insetForSectionAt section: Int) -> UIEdgeInsets {
		return UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 120)
	}

	func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {

		if collectionView == photosCollection {
		}

		if collectionView == tripsCollection {
		}
	}

}

