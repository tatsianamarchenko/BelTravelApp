//
//  ProfileViewController.swift
//  BelTravelApp
//
//  Created by Tatsiana Marchanka on 11.05.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ProfileDisplayLogic: class {
	func displayUserInformation(viewModel: Profile.Something.ViewModel)
	func displayNewPhotoOfUser(viewModel: Profile.Something.ViewModel)
}

class ProfileViewController: UIViewController, ProfileDisplayLogic {
  var interactor: ProfileBusinessLogic?
  var router: (NSObjectProtocol & ProfileRoutingLogic & ProfileDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = ProfileInteractor()
    let presenter = ProfilePresenter()
    let router = ProfileRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
	override func viewDidLoad() {
		super.viewDidLoad()
		loadUserInformation()
		tapGesture = UITapGestureRecognizer(target: self, action: #selector(tapped))
		photoOfUser.isUserInteractionEnabled = true
		photoOfUser.addGestureRecognizer(tapGesture!)
		makePhotosOfUsersCollection()
	}
	@objc func tapped() {
		presentPhoto()
	}
  
  // MARK: Do something

	var photoOfOtherUsers = [UIImage]()

	var tapGesture: UITapGestureRecognizer?
	@IBOutlet weak var nameLable: UILabel!
	@IBOutlet weak var photoOfUser: UIImageView!
	@IBOutlet weak var defaultLocationLable: UILabel!
	@IBOutlet weak var numberOfTripsOfUserLable: UILabel!
	@IBOutlet weak var photoOfUserCollection: UICollectionView!
	@IBOutlet weak var noPhotoLable: UILabel!

	@IBAction func exitButton(_ sender: Any) {
		FirebaseAuthManager.shered.signOut {
			self.router?.routeToSliderViewController()
		}
	}

	@IBAction func addPhotoAction(_ sender: Any) {
	//	presentPhoto()
	}

  func loadUserInformation() {
    let request = Profile.Something.Request()
    interactor?.loadInformation(request: request)
  }
  
	func displayUserInformation(viewModel: Profile.Something.ViewModel) {
		self.nameLable.text = "\(viewModel.name!) \(viewModel.lastName!)"
		self.defaultLocationLable.text = viewModel.defaultLocation
		self.numberOfTripsOfUserLable.text = viewModel.numberOfTripsOfUser
		guard let image = viewModel.newImage else {return}
		photoOfUser.image = image
	}

	func displayNewPhotoOfUser(viewModel: Profile.Something.ViewModel) {
		guard let image = viewModel.newImage else {return}
		photoOfUser.image = image
	}

	func makePhotosOfUsersCollection () {
		photoOfUserCollection.delegate = self
		photoOfUserCollection.dataSource = self
		let nib = UINib(nibName: "PlaceCollectionViewCell", bundle: nil)
		photoOfUserCollection.register(nib, forCellWithReuseIdentifier: PlaceCollectionViewCell.identifier)
	}
}


extension ProfileViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {

	func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
			return photoOfOtherUsers.count
	}

	func numberOfSections(in collectionView: UICollectionView) -> Int {
		return 1
	}

	func collectionView(_ collectionView: UICollectionView,
						cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {

			if !photoOfOtherUsers.isEmpty {
				noPhotoLable.isHidden = true
			}

			guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier:
																	PlaceCollectionViewCell.identifier, for: indexPath)
					as? PlaceCollectionViewCell else {
				return UICollectionViewCell()
			}
		cell.imageOfLocation.image = photoOfOtherUsers[indexPath.row]
			cell.layer.borderWidth = 0
			cell.layer.shadowColor = UIColor.systemGray.cgColor
			cell.layer.shadowOffset = CGSize(width: 0.3, height: 0)
			cell.layer.shadowRadius = 3
			cell.layer.shadowOpacity = 0.5
			cell.layer.cornerRadius = 15
			cell.layer.masksToBounds = false
			return cell

	}

	func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						sizeForItemAt indexPath: IndexPath) -> CGSize {
		return CGSize(width: 150, height: 150)
	}

	func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
		return 1
	}
	func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						minimumLineSpacingForSectionAt section: Int) -> CGFloat {
		return 20
	}

	func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						insetForSectionAt section: Int) -> UIEdgeInsets {
		return UIEdgeInsets(top: 20, left: 20, bottom: 20, right: 20)
	}

	func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {

	}
}


extension ProfileViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {

	func photoWithCamera(){
		let vc = UIImagePickerController()
		vc.sourceType = .camera
		vc.delegate = self
		vc.allowsEditing = true
		present(vc, animated: true)
	}
	func photoFromLibrary(){
		let vc = UIImagePickerController()
		vc.sourceType = .photoLibrary
		vc.delegate = self
		vc.allowsEditing = true
		present(vc, animated: true)
	}

	func presentPhoto(){
		let choose = UIAlertController(title: "Profile Photo", message: "How would you like to select a photo?", preferredStyle: .actionSheet)
		let library = UIAlertAction(title: "photo library", style: .default, handler: {[weak self] _ in self?.photoFromLibrary() } )
		let camera = UIAlertAction(title: "take photo", style: .default, handler: {[weak self] _ in self?.photoWithCamera()} )
		let cancel = UIAlertAction(title: "cancel", style: .cancel, handler: nil)
		choose.addAction(library)
		choose.addAction(camera)
		choose.addAction(cancel)
		present(choose, animated: true)
	}

	func imagePickerController (_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [UIImagePickerController.InfoKey: Any] ) {
		picker.dismiss(animated: true, completion: nil)
		guard  let selectedImage = info[UIImagePickerController.InfoKey.editedImage] as? UIImage else {
			return
		}
		let request = Profile.Something.Request(image: selectedImage, name: "\(nameLable.text!)")
		interactor?.saveImageInDatabase(request: request)
	}
	func imagePickerControllerDidCancel(_ picker: UIImagePickerController) {
		picker.dismiss(animated: true, completion: nil)
	}
}
