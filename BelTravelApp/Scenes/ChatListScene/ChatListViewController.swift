//
//  ChatListViewController.swift
//  BelTravelApp
//
//  Created by Tatsiana Marchanka on 26.05.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ChatListDisplayLogic: class {
  func displaySomething(viewModel: ChatList.Something.ViewModel)
}

class ChatListViewController: UIViewController, ChatListDisplayLogic {
  var interactor: ChatListBusinessLogic?
  var router: (NSObjectProtocol & ChatListRoutingLogic & ChatListDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = ChatListInteractor()
    let presenter = ChatListPresenter()
    let router = ChatListRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
  override func viewDidLoad() {
    super.viewDidLoad()
	title = "Chats"
	  makeChatsTableView()
    doSomething()
  }
  
  // MARK: Do something
var chatsArray = [UserChat]()
	@IBOutlet weak var noChatsLable: UILabel!
	@IBOutlet weak var chatsTableView: UITableView!

  func doSomething() {
    let request = ChatList.Something.Request()
    interactor?.doSomething(request: request)
  }
	func makeChatsTableView() {
		chatsTableView.delegate = self
		chatsTableView.dataSource = self
		let nib = UINib(nibName: "ChatListTableViewCell", bundle: nil)
		chatsTableView.register(nib, forCellReuseIdentifier: ChatListTableViewCell.identifier)
	}
  
  func displaySomething(viewModel: ChatList.Something.ViewModel) {
    //nameTextField.text = viewModel.name
  }
	
}

extension ChatListViewController: UITableViewDelegate, UITableViewDataSource {
	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		return chatsArray.count
	}

	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
		if !chatsArray.isEmpty {
			noChatsLable.isHidden = true
		}
		guard let cell = tableView.dequeueReusableCell(withIdentifier: ChatListTableViewCell.identifier, for: indexPath) as? ChatListTableViewCell else {
			return UITableViewCell()
		}
		cell.config(model: chatsArray[indexPath.row])
		return cell
	}

	func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
		70
	}

	func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {

	}
}


struct MessageRecived {
	let	message: String
	let	sender: String
	let data: Date
}

struct UserChat {
	var members: [String]
	var chatId: String
	var messageText: String
	var tripName: String
	var tripImage: UIImage
	var messageDate: String
}
