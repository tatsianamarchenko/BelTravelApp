//
//  MainViewController.swift
//  BelTravelApp
//
//  Created by Tatsiana Marchanka on 10.05.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import MapKit
import CoreLocation

protocol MainDisplayLogic: class {
	func displayPopularPlaces(viewModel: Main.Something.ViewModel)
	func presentSelectedPopularPlaceViewController()
	func presentUpcomingTripViewController() 
	func displayCreatedTrips(viewModel: Main.Something.ViewModel)
	func displayPins(viewModel: Main.Something.ViewModel)
}

class MainViewController: UIViewController, MainDisplayLogic {
  var interactor: MainBusinessLogic?
  var router: (NSObjectProtocol & MainRoutingLogic & MainDataPassing)?

  // MARK: Object lifecycle
  
  override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
    super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
    setup()
  }
  
  required init?(coder aDecoder: NSCoder) {
    super.init(coder: aDecoder)
    setup()
  }
  
  // MARK: Setup
  
  private func setup() {
    let viewController = self
    let interactor = MainInteractor()
    let presenter = MainPresenter()
    let router = MainRouter()
    viewController.interactor = interactor
    viewController.router = router
    interactor.presenter = presenter
    presenter.viewController = viewController
    router.viewController = viewController
    router.dataStore = interactor
  }
  
  // MARK: Routing
  
  override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
    if let scene = segue.identifier {
      let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
      if let router = router, router.responds(to: selector) {
        router.perform(selector, with: segue)
      }
    }
  }
  
  // MARK: View lifecycle
  
	override func viewDidLoad() {
		super.viewDidLoad()
		makeRegionsCollection()
		makeMostPopularPlacesCollection()
		makeNextTripsCollection()
		loadInformationForCollections()
		loadCreatedTrips()
		loadPins()
		locationManager.delegate = self
		mapView.delegate = self
		mapView.register(MKMarkerAnnotationView.self,
						 forAnnotationViewWithReuseIdentifier: NSStringFromClass(MapPinAnnotation.self))
	}

	let regions = [Region(image: Image(withImage: UIImage(named: "Minsk")!), name: "Minsk", identifier: "MinskRegion"),
				   Region(image: Image(withImage: UIImage(named: "Brest")!), name: "Brest", identifier: "BrestRegion"),
				   Region(image: Image(withImage: UIImage(named: "Vitebsk")!), name: "Vitebsk", identifier: "VitebskRegion"),
				   Region(image: Image(withImage: UIImage(named: "Gomel")!), name: "Gomel", identifier: "GomelRegion"),
				   Region(image: Image(withImage: UIImage(named: "Grodno")!), name: "Grodno", identifier: "GrodnoRegion"),
				   Region(image: Image(withImage: UIImage(named: "Mogilev")!), name: "Mogilev", identifier: "MogilevRegion")
  ]
	var popularPlaces = [Location]()
	var createdTrips = [NewTrip]()

	let locationManager = CLLocationManager()

	@IBOutlet weak var regionsCollection: UICollectionView!
	@IBOutlet weak var nextTripsCollection: UICollectionView!
	@IBOutlet weak var popularPlacesCollection: UICollectionView!
	@IBOutlet weak var mapView: MKMapView!
	@IBOutlet weak var noTripsLable: UILabel!
	@IBAction func allLocationButtonAction(_ sender: Any) {
		router?.routeToAllLocationsViewController()
	}
	
	func makeRegionsCollection () {
		let nib = UINib(nibName: "RegionCollectionViewCell", bundle: nil)
		regionsCollection.register(nib, forCellWithReuseIdentifier: RegionCollectionViewCell.identifier)
	}

	func makeMostPopularPlacesCollection () {
		popularPlacesCollection.delegate = self
		popularPlacesCollection.dataSource = self
		let nib = UINib(nibName: "PlaceCollectionViewCell", bundle: nil)
		popularPlacesCollection.register(nib, forCellWithReuseIdentifier: PlaceCollectionViewCell.identifier)
	}

	func makeNextTripsCollection () {
		nextTripsCollection.delegate = self
		nextTripsCollection.dataSource = self
		let nib = UINib(nibName: "UpcomingTripCollectionViewCell", bundle: nil)
		nextTripsCollection.register(nib, forCellWithReuseIdentifier: UpcomingTripCollectionViewCell.identifier)
	}

var regionName = "MinskRegion"

	func loadInformationForCollections() {
		mapView.removeAnnotations(mapView.annotations)
		let request = Main.Something.Request(region: regionName)
		interactor?.loadInformation(request: request)
	}
  
	func displayPopularPlaces(viewModel: Main.Something.ViewModel) {
		guard let locations = viewModel.locations else {
			return
		}
		popularPlaces = locations
		popularPlacesCollection.reloadData()
	}

	func loadCreatedTrips() {
		let request = Main.Something.Request(region: regionName)
		interactor?.loadCreatedTrips(request: request)
	}

	func loadPins() {
		let request = Main.Something.Request(region: regionName)
		interactor?.loadPins(request: request)
	}

	func displayCreatedTrips(viewModel: Main.Something.ViewModel) {
		guard let trips = viewModel.createdTrips else {
			return
		}
		createdTrips = trips
		DispatchQueue.main.async {
			self.nextTripsCollection.reloadData()
		}
	}

	func displayPins(viewModel: Main.Something.ViewModel) {
		guard let pin = viewModel.location else {
			return
		}
		self.mapView.addAnnotations([pin])
	}

	func presentSelectedPopularPlaceViewController() {
		router?.routeToSelectedPlaceViewController()
	}
}

extension MainViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {

	func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
		if collectionView == regionsCollection {
			return regions.count
		}
		if collectionView == popularPlacesCollection {
			return popularPlaces.count
		}
		if collectionView == nextTripsCollection {
			return createdTrips.count
		}
		return 0
	}

	func numberOfSections(in collectionView: UICollectionView) -> Int {
		return 1
	}

	func collectionView(_ collectionView: UICollectionView,
						cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
		if collectionView == regionsCollection {
		guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier:
																RegionCollectionViewCell.identifier, for: indexPath)
				as? RegionCollectionViewCell else {
					return UICollectionViewCell()
				}
		cell.config(model: regions[indexPath.row])
			cell.layer.borderWidth = 0
			cell.layer.shadowColor = UIColor.systemGray.cgColor
			cell.layer.shadowOffset = CGSize(width: 0.3, height: 0)
			cell.layer.shadowRadius = 3
			cell.layer.shadowOpacity = 0.5
			cell.layer.cornerRadius = 15
			cell.layer.masksToBounds = false
			return cell
		}

		if collectionView == popularPlacesCollection {
			guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier:
																	PlaceCollectionViewCell.identifier, for: indexPath)
					as? PlaceCollectionViewCell else {
						return UICollectionViewCell()
					}
			cell.imageOfLocation.image = popularPlaces[indexPath.row].image
			cell.layer.borderWidth = 0
			cell.layer.shadowColor = UIColor.systemGray.cgColor
			cell.layer.shadowOffset = CGSize(width: 0.3, height: 0)
			cell.layer.shadowRadius = 3
			cell.layer.shadowOpacity = 0.5
			cell.layer.cornerRadius = 15
			cell.layer.masksToBounds = false
			return cell
		}

		if collectionView == nextTripsCollection {
			if !createdTrips.isEmpty {
				noTripsLable.isHidden = true
			}
			guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier:
																	UpcomingTripCollectionViewCell.identifier, for: indexPath)
					as? UpcomingTripCollectionViewCell else {
						return UICollectionViewCell()
					}
			cell.config(model: createdTrips[indexPath.row])
			cell.layer.borderWidth = 0
			cell.layer.shadowColor = UIColor.systemGray.cgColor
			cell.layer.shadowOffset = CGSize(width: 0.3, height: 0)
			cell.layer.shadowRadius = 3
			cell.layer.shadowOpacity = 0.5
			cell.layer.cornerRadius = 15
			cell.layer.masksToBounds = false
			return cell
		}

		return UICollectionViewCell()
	}

	func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						sizeForItemAt indexPath: IndexPath) -> CGSize {
		if collectionView == regionsCollection {
			return CGSize(width: 100, height: 100)
		}

		if collectionView == popularPlacesCollection {
			return CGSize(width: 150, height: 150)
		}
		if collectionView == nextTripsCollection {
			return CGSize(width: 250, height: 100)
		}

		return CGSize(width: 100, height: 100)
	}

	func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
		if collectionView == regionsCollection {
			return 1
		}
		return 1
	}
	func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						minimumLineSpacingForSectionAt section: Int) -> CGFloat {
		if collectionView == regionsCollection {
			return 20
		}
		return 20
	}

	func collectionView(_ collectionView: UICollectionView,
						layout collectionViewLayout: UICollectionViewLayout,
						insetForSectionAt section: Int) -> UIEdgeInsets {
		if collectionView == regionsCollection {
			return UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 120)
		}
		return UIEdgeInsets(top: 0, left: 20, bottom: 0, right: 120)
	}

	func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
		if collectionView == regionsCollection {
			if	regions[indexPath.row].identifier == "MinskRegion" {
				regionName = "MinskRegion"
				self.viewDidLoad()
			} else if regions[indexPath.row].identifier == "BrestRegion" {
				regionName = "BrestRegion"
				self.viewDidLoad()
			}
			else if regions[indexPath.row].identifier == "VitebskRegion" {
				regionName = "VitebskRegion"
				self.viewDidLoad()
			}
			else if regions[indexPath.row].identifier == "GrodnoRegion" {
				regionName = "GrodnoRegion"
				self.viewDidLoad()
			}
			else if regions[indexPath.row].identifier == "GomelRegion" {
				regionName = "GomelRegion"
				self.viewDidLoad()
			}
			else if regions[indexPath.row].identifier == "MogilevRegion" {
				regionName = "MogilevRegion"
				self.viewDidLoad()
			}
		}

		if collectionView == popularPlacesCollection {
			let request = Main.Something.Request(region: regionName, selectedPopularPlace: popularPlaces[indexPath.row])
			interactor?.setPopularLocation(request: request)
		}

		if collectionView == nextTripsCollection {
			let request = Main.Something.Request(region: regionName, newTrip: createdTrips[indexPath.row])
			interactor?.setNewTripInformation(request: request)
		}
	}

	func presentUpcomingTripViewController() {
		router?.routeToUpcomingTripViewController()
	}
}

extension MainViewController: CLLocationManagerDelegate {
	func locationManager(_ manager: CLLocationManager, didUpdateLocations locations: [CLLocation]) {
		guard let locValue: CLLocationCoordinate2D = manager.location?.coordinate else {
			return }
		manager.stopUpdatingLocation()
		let regionRadius: CLLocationDistance = 3000
		mapView.centerToLocation(CLLocation(latitude: locValue.latitude, longitude: locValue.longitude), regionRadius: regionRadius)
	}
}

extension MainViewController: MKMapViewDelegate {

	func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
		var annotationView: MKAnnotationView?
		if let annotation = annotation as? MapPinAnnotation {
			annotationView = setupAnnotationView(for: annotation, on: mapView)
		}
		return annotationView
	}

	private func setupAnnotationView(for annotation: MapPinAnnotation, on mapView: MKMapView) -> MKAnnotationView {
		let identifier = NSStringFromClass(MapPinAnnotation.self)
		let view = mapView.dequeueReusableAnnotationView(withIdentifier: identifier, for: annotation)
		view.canShowCallout = false
		if let markerAnnotationView = view as? MKMarkerAnnotationView {
			markerAnnotationView.animatesWhenAdded = true
			markerAnnotationView.clusteringIdentifier = "PinCluster"
			markerAnnotationView.markerTintColor = .systemMint
			markerAnnotationView.titleVisibility = .visible
		}
		return view
	}

	func mapView(_ mapView: MKMapView,
							 didSelect view: MKAnnotationView) {
		if let annotation = view.annotation as? MapPinAnnotation {
			let location = annotation.location
			let request = Main.Something.Request(region: regionName, selectedPopularPlace: location)
			interactor?.setPopularLocation(request: request)
		}
	}
}

extension MKMapView {
	func centerToLocation(
		_ location: CLLocation,
		regionRadius: CLLocationDistance = 650000
	) {
		let coordinateRegion = MKCoordinateRegion(
			center: location.coordinate,
			latitudinalMeters: regionRadius,
			longitudinalMeters: regionRadius)
		setRegion(coordinateRegion, animated: true)
	}
}
